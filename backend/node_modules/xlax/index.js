'use strict';

var
    xpath = require('xpath'),
    dom = require('xmldom').DOMParser;


var xlax = function(data) {
    var xml = cleanSoapScum(data);
    var doc = new dom().parseFromString(xml);
    var self = this;
    self.length = 0;
    self.extractOne = function(path) {
        var nodes;
        try {
            nodes = xpath.select(path, doc);
        } catch (err) {
            nodes = [];
        }
        if (path.indexOf('text()') >= 0 && nodes.length >= 1) {
            return nodes[0].toString();
        } else {
            if (nodes.length >= 1 && nodes[0].firstChild && 'data' in nodes[0].firstChild) {
                return nodes[0].firstChild.data;
            } else if(nodes.length >= 1 && path.indexOf('@') >= 0 && 'value' in nodes[0]) {
                return nodes[0].value;
            } else {
                return '';
            }
        }
    };
    self.extractOnes = function(collection) {
        var out = {};
        if (Array.isArray(collection)) {
            collection.forEach(function(item) {
                out[item.key] = self.extractOne(item.path);
            });
        } else {
            for(var key in collection) {
                out[key] = self.extractOne(collection[key]);
            }
        }
        return out;
    };
    var matches = function(path) {
        var nodes,
            out = [];
        try {
            nodes = xpath.select(path, doc);
        } catch (err) {
            nodes = [];
        }
        self.length = nodes.length;
        nodes.forEach(function(item) {
            out.push(new xlax(item.toString()));
        });
        return out;
    };
    self.extract = function(path) {
        var out = matches(path);
        return out;
    };
    self.toString = function() {
        return data;
    };
    self.forEach = function(path, callback) {
        matches(path).forEach(callback);
    };
};

var cleanSoapScum = function(str) {
    // get rid of namespaced tags
    function replacer_namespaces(p1, p2, p3) {
        return '<' + p2 + p3;
    };
    str = str.replace(/<(\/?)[\w-]+:(\w+)/g, replacer_namespaces);
    // get rid of ":" parameters
    str = str.replace(/ \w+:\w+="[^"]+"/g, '');
    // get rid of namespace declarations
    str = str.replace(/ xmlns="[^"]+"/g, '');
    return str;
};

module.exports = xlax;
